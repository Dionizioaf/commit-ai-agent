import subprocess
import requests

def get_git_diff():
    """Obt√©m o diff das altera√ß√µes stageadas"""
    return subprocess.check_output(
        ["git", "diff", "--staged"], 
        stderr=subprocess.STDOUT
    ).decode("utf-8")

def generate_commit_message(api_key, diff, model, verbose=False):
    """Gera mensagem usando API do DeepSeek"""
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    prompt = f"""Voc√™ √© um assistente de commits especialista em Conventional Commits. 

Analise este diff e gere uma mensagem de commit seguindo o padr√£o Conventional Commits:

{diff}

Formato exigido:
<tipo>[escopo opcional]: <descri√ß√£o concisa>

Tipos permitidos:
- feat: Nova funcionalidade
- fix: Corre√ß√£o de bug
- docs: Altera√ß√µes na documenta√ß√£o
- style: Mudan√ßas de formata√ß√£o
- refactor: Refatora√ß√£o de c√≥digo
- perf: Melhorias de performance
- test: Adi√ß√£o/ajuste de testes
- chore: Tarefas de manuten√ß√£o
- build: Mudan√ßas no sistema de build
- ci: Mudan√ßas na CI/CD
- revert: Revers√£o de commit

Responda APENAS com a mensagem de commit, sem coment√°rios extras."""

    data = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3,
        "max_tokens": 100
    }

    response = requests.post(
        "https://api.deepseek.com/v1/chat/completions",
        json=data,
        headers=headers
    )
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"].strip()

def commit_with_ai(api_key, model, verbose):
    """Fluxo principal de commit"""
    diff = get_git_diff()
    
    if verbose:
        click.echo("üìã Diff analysis:")
        click.echo(diff[:500] + "...\n")
    
    commit_msg = generate_commit_message(api_key, diff, model)
    
    if verbose:
        click.echo("ü§ñ AI-generated message:")
    
    return commit_msg